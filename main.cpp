#include <iostream>
#include <fstream>
#include <armadillo>
#include "network.h"
#include "armadillo_bits/config.hpp"
using namespace std;
using namespace arma;
int main()
{
//    srand((unsigned int)time(NULL));
//    network nets(10,10);
//    nets.setVec(103,9);
//    nets.save("before/cell");
//    network nets("after/cellm");
//    mat dataset;
//    dataset.load("sub_dataset.dat",raw_ascii);
//    nets.datasetOnLineTrain(dataset,BP_NONE,3000);
//    nets.save("before/cell");
//    return 0;
//    mat dataset;
//    dataset.load("deal_dataset.dat",raw_ascii);
//    mat subdataset=mat(1000,112);
//    bool ispick[41727];
//    for(int i=0;i<41727;i++)
//        ispick[i]=false;
//    for(int i=0;i<1000;i++)
//    {
//        int no=rand()%41727;
//        while(ispick[no]==true)
//        {
//            no=rand()%41727;
//        }
//        cout<<no<<endl;
//        ispick[no]=true;
//        subdataset.row(i)=dataset.row(no);
//    }
//    subdataset.save("sub_dataset.dat",raw_ascii);
    network nets("Tr1/cell");
    nets.active(rowvec("2.916250000000e-01   3.168750000000e-01   3.435000000000e-01   3.683750000000e-01   3.942500000000e-01   4.111250000000e-01   4.161250000000e-01   4.176250000000e-01   4.338750000000e-01   4.535000000000e-01   4.635000000000e-01   4.591250000000e-01   4.648750000000e-01   4.750000000000e-01   4.873750000000e-01   4.972500000000e-01   4.982500000000e-01   5.005000000000e-01   5.001250000000e-01   4.985000000000e-01   4.952500000000e-01   4.911250000000e-01   4.878750000000e-01   4.828750000000e-01   4.765000000000e-01   4.763750000000e-01   4.762500000000e-01   4.712500000000e-01   4.625000000000e-01   4.572500000000e-01   4.520000000000e-01   4.418750000000e-01   4.296250000000e-01   4.232500000000e-01   4.167500000000e-01   4.046250000000e-01   3.968750000000e-01   3.835000000000e-01   3.673750000000e-01   3.537500000000e-01   3.368750000000e-01   3.196250000000e-01   3.043750000000e-01   2.917500000000e-01   2.810000000000e-01   2.722500000000e-01   2.643750000000e-01   2.553750000000e-01   2.503750000000e-01   2.467500000000e-01   2.443750000000e-01   2.412500000000e-01   2.391250000000e-01   2.392500000000e-01   2.363750000000e-01   2.301250000000e-01   2.288750000000e-01   2.288750000000e-01   2.318750000000e-01   2.368750000000e-01   2.400000000000e-01   2.442500000000e-01   2.492500000000e-01   2.537500000000e-01   2.593750000000e-01   2.641250000000e-01   2.675000000000e-01   2.676250000000e-01   2.697500000000e-01   2.727500000000e-01   2.701250000000e-01   2.670000000000e-01   2.625000000000e-01   2.592500000000e-01   2.565000000000e-01   2.575000000000e-01   2.607500000000e-01   2.653750000000e-01   2.718750000000e-01   2.770000000000e-01   2.833750000000e-01   2.872500000000e-01   2.832500000000e-01   2.786250000000e-01   2.835000000000e-01   2.883750000000e-01   2.897500000000e-01   2.897500000000e-01   2.885000000000e-01   2.875000000000e-01   2.910000000000e-01   2.922500000000e-01   2.898750000000e-01   2.910000000000e-01   2.942500000000e-01   2.957500000000e-01   2.983750000000e-01   3.073750000000e-01   3.131250000000e-01   3.121250000000e-01   3.108750000000e-01   3.141250000000e-01   3.221250000000e-01"));
    return 0;
}
